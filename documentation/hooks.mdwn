[[!meta title="Hooks - Smuxi"]]

# Smuxi Hooks / Scripts / Plugins #

## Language Support ##

After years of waiting we are more than happy to finally have scripting support
in Smuxi! You are probably thinking right now "so which scripting language is
it?! C#? VB.NET? JavaScript? Perl? Python? Ruby? Maybe even PHP?" and here
comes the best part: **ALL OF THEM AND MORE!** More? What else there would
be... well, if you really want you can write Smuxi hooks in C, C++ or even
assembler ;)

## How It Works ##

It's Magic! No, just kidding. This is pure Unix technology taken from the 70s
ported to a powerful messaging client. If you know what [Git hooks][], [Nagios
checks/plugins][nagios plugins] or CGI scripts are, then you already know what
Smuxi hooks are, if you don't then continue reading this paragraph.  Any
executable program in a [special location (hook points)][hook points] will be
executed when a specific event happens, like receiving a message. This program
gets all information passed as [environment variables][hook variables], like who
send the message (SENDER), what was the message (MSG), when was it received
(MSG\_TIMESTAMP\_UNIX) etc.  This program is also able to execute Smuxi commands
by writing [hook commands][] to the standard output.

Currently there are 2 main types of Smuxi hooks:

 * protocol-manager hooks: these are mainly events like message-received/sent
   that the various protocol managers (IRC, Twitter, XMPP, etc) can raise
 * command hooks: these are added Smuxi commands running in the frontend, so you
   can add /some_cool_command to Smuxi

Smuxi hooks are maintained in the [smuxi-hooks git repository][smuxi-hooks.git].
So if you want to share your written hook simply create a pull request against
that repository on GitHub, other Smuxi users will be very thankful! Right now
thre are only 2 proof-of-concept hooks available:

 * [now-playing][]: adds a /np command to Smuxi which shows the currently
   playing song/video of Banshee using MPRIS2 on D-Bus or YouTube (Chrome only).
 * [tinyurl-resolver][]: resolves all shortened URLs of t.co, bit.ly, etc to the
   full URL. This was originally an irssi plugin written in Perl.

## Installing Hooks ##

"Wow, I am completely amazed, but how can I install hooks?" For now you will
need to either download the files of the hook into the same location into
$HOME/.local/share/smuxi/hooks or by cloning the git repository and symlinking
the files. Here is an example for each method:

### Download Method ###

    mkdir -p $HOME/.local/share/smuxi/hooks/frontend/command-manager/command-np/
    cd $HOME/.local/share/smuxi/hooks/frontend/command-manager/command-np/
    wget https://raw.github.com/meebey/smuxi-hooks/master/now-playing/frontend/command-manager/command-np/now-playing.sh
    chmod +x now-playing.sh

### Git Clone Method ###

    cd $HOME
    git clone https://github.com/meebey/smuxi-hooks.git
    mkdir -p $HOME/.local/share/smuxi/hooks/frontend/command-manager/command-np/
    cd $HOME/.local/share/smuxi/hooks/frontend/command-manager/command-np/
    ln -s $HOME/smuxi-hooks/now-playing/frontend/command-manager/command-np/now-playing.sh

## Location ##

Hooks are automatically activated when they are placed in the right location.
So after putting them in the hook point location (see see *Hook Points* section)
you don't need to do anything else.

The base location (without the hook point part) is for

 * Linux: $HOME/.local/share/smuxi/hooks
 * Windows:
   * Vista/7/8.x: %LOCALAPPDATA%\smuxi\hooks
   * XP: %USERPROFILE%\Local Settings\Application Data\smuxi\hooks
 * Mac OS X: 

## Environment Variables ##

All variables are prefixed with SMUXI\_ to prevent clash with other environment
variables.

 * CHAT_ID
 * CHAT_NAME
 * CHAT_TYPE: Session, Protocol, Person, Group
 * MSG
 * MSG_TYPE: Normal, Event, ChatState{Composing,Paused,Reset}
 * MSG_TIMESTAMP_UNIX
 * MSG_TIMESTAMP_ISO_UTC
 * MSG_TIMESTAMP_ISO_LOCAL
 * SENDER
 * RECEIVER
 * TODO: PROTOCOL_MANAGER_TYPE
 * PROTOCOL_MANAGER_PROTOCOL: IRC, Twitter, Facebook, XMPP, JabbR, Campfire 
 * PROTOCOL_MANAGER_NETWORK
 * PROTOCOL_MANAGER_HOST
 * PROTOCOL_MANAGER_PORT
 * PROTOCOL_MANAGER_ME_ID
 * PROTOCOL_MANAGER_PRESENCE_STATUS: Unknown, Offline, Online, Away (>= 0.11)
 * CMD (command-manager only, >= 0.10.1)
 * CMD_PARAMETER (command-manager only, >= 0.10.1)
 * CMD_CHARACTER (command-manager only, >= 0.10.1)
 * FRONTEND_VERSION (command-manager only)
 * ENGINE_VERSION (protocol-manager only)

## Hook State ##

Hooks are executed when the event occurs and have to exit so further processing
can be done. If hooks need to retain state they can write their state to files
of the current directory ($PWD). Each hook has its own state directory and can
be found in $HOME/.local/share/smuxi/hook-state/$HOOK\_PATH. The hook does
*not* need to change to or create the state directory, as the hook runner will
do this for the hook, guaranteed.

## Hook Points ##

### engine/protocol-manager/on-connected/ ###

### engine/protocol-manager/on-disconnected/ ###

### engine/protocol-manager/on-message-sent/ ###

### engine/protocol-manager/on-message-received/ ###

### engine/protocol-manager/on-presence-status-changed/ (>= 0.12) ###

Event specific environment variables:

 * PRESENCE_STATUS_CHANGED_OLD_STATUS: for valid values see
   PROTOCOL_MANAGER_PRESENCE_STATUS
 * PRESENCE_STATUS_CHANGED_NEW_STATUS: for valid values see
   PROTOCOL_MANAGER_PRESENCE_STATUS
 * PRESENCE_STATUS_CHANGED_NEW_MESSAGE

### engine/session/on-group-chat-person-added/ ###

### engine/session/on-group-chat-person-removed/ ###

### engine/session/on-group-chat-person-updated/ ###

### engine/session/on-event-message/ (>= 0.12) ###

### engine/session/command-$cmd/ (>= 0.12) ###

### frontend/command-manager/command-$cmd/ ###

## Hook Commands ##

### Session.Command $cmd $cmd_params... ###

Supported session commands can be found [here][session commands].

Example:

    echo "Session.Command /echo I am a hook!"

### ProtocolManager.Command $cmd $cmd\_params... ####

Supported protocol manager commands fully depends on the protocol manager
implementation/type, thus you need to check the PROTOCOL_MANAGER_PROTOCOL
environment variable first! Here you can find a list for [IRC][irc commands],
[Twitter][twitter commands], [XMPP][xmpp commands], [JabbR][jabbr commands] and
[Campfire][campfire commands].

Example:

    if [ "$SMUXI_PROTOCOL_MANAGER_PROTOCOL" = "IRC" ]; then
        echo "ProtocolManager.Command /topic This is the new topic"
    fi

  [git hooks]: https://www.kernel.org/pub/software/scm/git/docs/githooks.html
  [nagios plugins]: http://www.nagios.org/projects/nagiosplugins
  [hook points]: #hookpoints
  [hook variables]: #environmentvariables
  [hook commands]: #hookcommands
  [smuxi-hooks.git]: https://github.com/meebey/smuxi-hooks
  [now-playing]: https://github.com/meebey/smuxi-hooks/tree/master/now-playing
  [tinyurl-resolver]: https://github.com/meebey/smuxi-hooks/tree/master/tinyurl-resolver
  [session commands]: https://github.com/meebey/smuxi/blob/master/src/Engine/Session.cs#L411 "Session.Command() method on GitHub"
  [irc commands]: https://github.com/meebey/smuxi/blob/master/src/Engine-IRC/Protocols/Irc/IrcProtocolManager.cs#L721 "IrcProtocolManager.Command() method on GitHub"
  [twitter commands]: https://github.com/meebey/smuxi/blob/master/src/Engine-Twitter/Protocols/Twitter/TwitterProtocolManager.cs#L628 "TwitterProtocolManager.Command() method on GitHub"
  [xmpp commands]: https://github.com/meebey/smuxi/blob/master/src/Engine-XMPP/Protocols/Xmpp/XmppProtocolManager.cs#L672 "XmppProtocolManager.Command() method on GitHub"
  [jabbr commands]: https://github.com/meebey/smuxi/blob/master/src/Engine-JabbR/JabbrProtocolManager.cs#L77 "JabbrProtocolManager.Command() method on GitHub"
  [campfire commands]: https://github.com/meebey/smuxi/blob/master/src/Engine-Campfire/Protocols/Campfire/CampfireProtocolManager.cs#L280 "CampfireProtocolManager.Command() method on GitHub"
